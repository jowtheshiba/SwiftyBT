import Foundation
import Network
import CryptoKit

@available(iOS 13.0, macOS 10.15, *)
class DHTTrackersProvider: @unchecked Sendable {
    
    private var udpSocket: NWConnection?
    private var isSearching = false
    private var foundTrackers: [TorrentURLTracker] = []
    private let queue = DispatchQueue(label: "DHTTrackersProvider", qos: .utility)
    private var transactionId: String = ""
    private var nodeId: String = ""
    private var activeConnections: [NWConnection] = []
    private var discoveredNodes: [String] = []
    private var searchStartTime: Date = Date()
    private var currentInfoHash: String = ""
    
    // MARK: - Public Methods
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ DHT —Ç—Ä–µ–∫–µ—Ä–æ–≤ –¥–ª—è TorrentFile
    /// - Parameters:
    ///   - torrentFile: –§–∞–π–ª —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
    ///   - completion: –ö–æ–ª–±—ç–∫ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞–º–∏
    func searchTrackers(for torrentFile: TorrentFile, completion: @escaping @Sendable ([TorrentURLTracker]) -> Void) {
        let infoHash = getInfoHash(from: torrentFile)
        searchTrackers(infoHash: infoHash, completion: completion)
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ DHT —Ç—Ä–µ–∫–µ—Ä–æ–≤ –¥–ª—è MagnetLink
    /// - Parameters:
    ///   - magnetLink: –ú–∞–≥–Ω–µ—Ç-—Å—Å—ã–ª–∫–∞
    ///   - completion: –ö–æ–ª–±—ç–∫ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞–º–∏
    func searchTrackers(for magnetLink: MagnetLink, completion: @escaping @Sendable ([TorrentURLTracker]) -> Void) {
        let infoHash = magnetLink.infoHash
        searchTrackers(infoHash: infoHash, completion: completion)
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–µ—Ä–æ–≤
    func stopSearch() {
        isSearching = false
        for connection in activeConnections {
            connection.cancel()
        }
        activeConnections.removeAll()
        udpSocket?.cancel()
        udpSocket = nil
    }
    
    // MARK: - Private Methods
    
    private func searchTrackers(infoHash: String, completion: @escaping @Sendable ([TorrentURLTracker]) -> Void) {
        guard !isSearching else { return }
        
        isSearching = true
        foundTrackers.removeAll()
        activeConnections.removeAll()
        discoveredNodes.removeAll()
        searchStartTime = Date()
        currentInfoHash = infoHash
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π transaction ID –∏ node ID
        transactionId = generateRandomString(length: 2)
        nodeId = generateRandomString(length: 20)
        
        print("üîç Starting DHT search for info_hash: \(infoHash)")
        
        queue.async { [weak self] in
            self?.startDHTBootstrap(infoHash: infoHash, completion: completion)
        }
    }
    
    private func startDHTBootstrap(infoHash: String, completion: @escaping @Sendable ([TorrentURLTracker]) -> Void) {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å bootstrap —É–∑–ª–æ–≤
        let bootstrapNodes = DHTPredefinedNodes.getAllNodes()
        
        print("üåê Connecting to \(bootstrapNodes.count) bootstrap DHT nodes...")
        for node in bootstrapNodes {
            print("   üîó Connecting to: \(node)")
            connectToDHTNode(node: node, infoHash: infoHash, completion: completion)
        }
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 30) { [weak self] in
            if self?.isSearching == true {
                print("‚è∞ DHT search timeout reached")
                self?.stopSearch()
                completion(self?.foundTrackers ?? [])
            }
        }
    }
    
    private func connectToDHTNode(node: String, infoHash: String, completion: @escaping @Sendable ([TorrentURLTracker]) -> Void) {
        let components = node.components(separatedBy: ":")
        guard components.count == 2,
              let host = components.first,
              let portString = components.last,
              let port = UInt16(portString) else {
            return
        }
        
        let endpoint = NWEndpoint.hostPort(
            host: NWEndpoint.Host(host),
            port: NWEndpoint.Port(integerLiteral: UInt16(port))
        )
        
        let connection = NWConnection(to: endpoint, using: .udp)
        activeConnections.append(connection)
        
        connection.stateUpdateHandler = { [weak self] state in
            switch state {
            case .ready:
                // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º FIND_NODE –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —É–∑–ª–æ–≤
                self?.sendDHTFindNodeQuery(connection: connection, targetNodeId: infoHash)
            case .failed(let error):
                break
            case .cancelled:
                break
            default:
                break
            }
        }
        
        connection.start(queue: queue)
    }
    
    private func sendDHTFindNodeQuery(connection: NWConnection, targetNodeId: String) {
        // –°–æ–∑–¥–∞–µ–º DHT FIND_NODE –∑–∞–ø—Ä–æ—Å
        let query = createDHTFindNodeQuery(targetNodeId: targetNodeId)
        
        connection.send(content: query, completion: .contentProcessed { [weak self] error in
            if let error = error {
                print("‚ùå Failed to send FIND_NODE query: \(error)")
            } else {
                self?.receiveDHTResponse(connection: connection)
            }
        })
    }
    
    private func sendDHTGetPeersQuery(connection: NWConnection, infoHash: String) {
        // –°–æ–∑–¥–∞–µ–º DHT GET_PEERS –∑–∞–ø—Ä–æ—Å
        let query = createDHTGetPeersQuery(infoHash: infoHash)
        
        connection.send(content: query, completion: .contentProcessed { [weak self] error in
            if let error = error {
                print("‚ùå Failed to send GET_PEERS query: \(error)")
            } else {
                self?.receiveDHTResponse(connection: connection)
            }
        })
    }
    
    private func receiveDHTResponse(connection: NWConnection) {
        connection.receiveMessage { [weak self] content, context, isComplete, error in
            if let error = error {
                return
            }
            
            if let data = content {
                self?.processDHTResponse(data: data, connection: connection)
            }
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å, –µ—Å–ª–∏ –µ—â–µ –∏—â–µ–º
            if self?.isSearching == true {
                self?.receiveDHTResponse(connection: connection)
            }
        }
    }
    
    private func processDHTResponse(data: Data, connection: NWConnection) {
        // –ü–∞—Ä—Å–∏–º DHT –æ—Ç–≤–µ—Ç
        do {
            let response = try BEncode.decode(data)
            if let dict = response.dictValue {
                if let y = dict["y"]?.stringValue {
                    switch y {
                    case "r": // response
                        if let r = dict["r"]?.dictValue {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∑–ª—ã –≤ –æ—Ç–≤–µ—Ç–µ (FIND_NODE –æ—Ç–≤–µ—Ç)
                            if let nodes = r["nodes"]?.dataValue {
                                self.processDiscoveredNodes(nodes: nodes)
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–∫–µ—Ä—ã –≤ –æ—Ç–≤–µ—Ç–µ (GET_PEERS –æ—Ç–≤–µ—Ç)
                            if let values = r["values"]?.listValue {
                                print("üéØ Found \(values.count) trackers for your torrent!")
                                
                                for value in values {
                                    if let trackerData = value.dataValue,
                                       let trackerString = String(data: trackerData, encoding: .utf8) {
                                        let tracker = TorrentURLTracker(
                                            trackerURL: trackerString,
                                            trackerType: .udp
                                        )
                                        foundTrackers.append(tracker)
                                        print("‚úÖ Found DHT tracker: \(trackerString)")
                                        print("   üìå This tracker is specifically for your torrent!")
                                        print("   üéØ Info Hash: \(currentInfoHash)")
                                        print("   üìä Total DHT trackers found so far: \(foundTrackers.count)")
                                    }
                                }
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ nodes –≤ GET_PEERS –æ—Ç–≤–µ—Ç–µ (–∫–æ–≥–¥–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–µ—Ä–æ–≤)
                            if let nodes = r["nodes"]?.dataValue {
                                self.processDiscoveredNodes(nodes: nodes)
                            }
                        }
                    case "e": // error
                        if let e = dict["e"]?.listValue,
                           e.count >= 2,
                           let errorCode = e[0].intValue,
                           let errorMessage = e[1].stringValue {
                            print("‚ùå DHT error: \(errorCode) - \(errorMessage)")
                        }
                    default:
                        break
                    }
                }
            }
        } catch {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
    }
    
    private func processDiscoveredNodes(nodes: Data) {
        // –ü–∞—Ä—Å–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É–∑–ª—ã –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∏–º
        let nodeSize = 26
        let nodeCount = nodes.count / nodeSize
        
        print("üîç Processing \(nodeCount) discovered DHT nodes...")
        
        for i in 0..<nodeCount {
            let startIndex = i * nodeSize
            let endIndex = startIndex + nodeSize
            
            guard endIndex <= nodes.count else { break }
            
            let nodeData = nodes.subdata(in: startIndex..<endIndex)
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∑–ª–∞ (20 –±–∞–π—Ç nodeId + 4 –±–∞–π—Ç–∞ IP + 2 –±–∞–π—Ç–∞ –ø–æ—Ä—Ç)
            let _ = nodeData.prefix(20) // nodeId - –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
            let ipData = nodeData.dropFirst(20).prefix(4)
            let portData = nodeData.dropFirst(24).prefix(2)
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º IP
            let ipBytes = Array(ipData)
            guard ipBytes.count == 4 else { continue }
            let ipString = ipBytes.map { String($0) }.joined(separator: ".")
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä—Ç
            let portBytes = Array(portData)
            guard portBytes.count == 2 else { continue }
            let portValue = UInt16(portBytes[0]) << 8 | UInt16(portBytes[1])
            
            let nodeAddress = "\(ipString):\(portValue)"
            
            if !discoveredNodes.contains(nodeAddress) {
                discoveredNodes.append(nodeAddress)
                print("   üîó New DHT node discovered: \(nodeAddress)")
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–º—É —É–∑–ª—É
                connectToDiscoveredNode(node: nodeAddress)
            }
        }
        
        print("üìä Total discovered nodes: \(discoveredNodes.count)")
    }
    
    private func connectToDiscoveredNode(node: String) {
        let components = node.components(separatedBy: ":")
        guard components.count == 2,
              let host = components.first,
              let portString = components.last,
              let port = UInt16(portString) else {
            return
        }
        
        let endpoint = NWEndpoint.hostPort(
            host: NWEndpoint.Host(host),
            port: NWEndpoint.Port(integerLiteral: UInt16(port))
        )
        
        let connection = NWConnection(to: endpoint, using: .udp)
        activeConnections.append(connection)
        
        connection.stateUpdateHandler = { [weak self] state in
            switch state {
            case .ready:
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET_PEERS –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —É–∑–ª—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º info_hash
                if let currentInfoHash = self?.currentInfoHash {
                    self?.sendDHTGetPeersQuery(connection: connection, infoHash: currentInfoHash)
                }
            case .failed(let error):
                break
            case .cancelled:
                break
            default:
                break
            }
        }
        
        connection.start(queue: queue)
    }
    
    private func createDHTFindNodeQuery(targetNodeId: String) -> Data {
        // –°–æ–∑–¥–∞–µ–º DHT FIND_NODE –∑–∞–ø—Ä–æ—Å –≤ bencode —Ñ–æ—Ä–º–∞—Ç–µ
        var queryDict: [String: BEncodeValue] = [:]
        
        // Transaction ID
        queryDict["t"] = .bytes(transactionId.data(using: .utf8)!)
        
        // Query type
        queryDict["y"] = .bytes("q".data(using: .utf8)!)
        queryDict["q"] = .bytes("find_node".data(using: .utf8)!)
        
        // Arguments
        var args: [String: BEncodeValue] = [:]
        args["id"] = .bytes(nodeId.data(using: .utf8)!)
        args["target"] = .bytes(targetNodeId.data(using: .utf8)!)
        queryDict["a"] = .dict(args)
        
        let query = BEncode.encode(.dict(queryDict))
        return query
    }
    
    private func createDHTGetPeersQuery(infoHash: String) -> Data {
        // –°–æ–∑–¥–∞–µ–º DHT GET_PEERS –∑–∞–ø—Ä–æ—Å –≤ bencode —Ñ–æ—Ä–º–∞—Ç–µ
        var queryDict: [String: BEncodeValue] = [:]
        
        // Transaction ID
        queryDict["t"] = .bytes(transactionId.data(using: .utf8)!)
        
        // Query type
        queryDict["y"] = .bytes("q".data(using: .utf8)!)
        queryDict["q"] = .bytes("get_peers".data(using: .utf8)!)
        
        // Arguments
        var args: [String: BEncodeValue] = [:]
        args["id"] = .bytes(nodeId.data(using: .utf8)!)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º info_hash –∏–∑ hex —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç—ã
        let infoHashBytes = hexStringToBytes(infoHash)
        args["info_hash"] = .bytes(infoHashBytes)
        queryDict["a"] = .dict(args)
        
        let query = BEncode.encode(.dict(queryDict))
        return query
    }
    
    private func hexStringToBytes(_ hexString: String) -> Data {
        var data = Data()
        var index = hexString.startIndex
        
        while index < hexString.endIndex {
            let nextIndex = hexString.index(index, offsetBy: 2)
            let hexPair = String(hexString[index..<nextIndex])
            
            if let byte = UInt8(hexPair, radix: 16) {
                data.append(byte)
            }
            
            index = nextIndex
        }
        
        return data
    }
    
    private func getInfoHash(from torrentFile: TorrentFile) -> String {
        // –í—ã—á–∏—Å–ª—è–µ–º SHA1 —Ö–µ—à –æ—Ç bencoded info —Å–µ–∫—Ü–∏–∏
        let infoBEncode = torrentFile.info.toBEncodeValue()
        let infoData = BEncode.encode(infoBEncode)
        
        let hash = Insecure.SHA1.hash(data: infoData)
        return hash.compactMap { String(format: "%02x", $0) }.joined()
    }
    
    private func generateRandomString(length: Int) -> String {
        let characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        return String((0..<length).map { _ in characters.randomElement()! })
    }
}
